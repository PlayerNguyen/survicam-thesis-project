version: "3.8"

services:
  # RabbitMQ for asynchronous messaging between services
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # RabbitMQ port
      - "15672:15672" # RabbitMQ management interface
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  # Milvus for vector storage of face embeddings
  # milvus:
  #   image: milvusdb/milvus:v2.2.9
  #   ports:
  #     - "19530:19530"
  #     - "9091:9091"

  # Global database
  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - .data/db/mongo:/data/db

  # RTSP Service (Camera 1) with HTTP preview
  rtsp-device-service:
    build: ./services/rtsp-service
    environment:
      APP_HOST: "rtsp-device-service"
      APP_PORT: 80
      MONGODB_URI: "mongodb://root:example@mongodb/test?authSource=admin"
      RABBIT_MQ_URI: "amqp://user:password@rabbitmq:5672/%2F"
    # ports:
    #   - "8100:80"
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: 200M
    depends_on:
      - rabbitmq
      - mongodb

  # Face Detection Service
  face-detection-service:
    build: ./services/face-detection-service
    environment:
      RABBIT_MQ_URI: "amqp://user:password@rabbitmq:5672/%2F"
      FACE_DETECT_MODEL: "fastmtcnn"
    restart: always
    deploy:
      replicas: 1
      # resources:
      #   reservations:
      #     devices:
      #       - driver: nvidia
      #         count: "${CUDA_ENABLED:-0}"
      #         capabilities: [gpu]
    depends_on:
      - rabbitmq
    volumes:
      - ./.data/cache/torch:/root/.cache/torch

  face-recognition-web-service:
    build: ./services/face-recognition-web-service
    environment:
      - MILVUS_CONNECTION_URI=http://milvus-standalone:19530
      - PRIMARY_EMBEDDING_COLLECTION_NAME=primary_face_embeddings
      - HISTORY_FACE_COLLECTION_NAME=history_face_embeddings
    deploy:
      replicas: 1
    restart: always
    # ports:
    #   - 8555:80
    volumes:
      - .data/recognition_data:/code/.data
      - ./.data/cache/torch:/root/.cache/torch

  ui-web-service:
    build: ./services/ui
    # ports:
    #   - 8080:80

  # # Face Recognition Service
  # face_recognition_service:
  #   build: ./services/face_recognition_service
  #   environment:
  #     RABBITMQ_HOST: rabbitmq
  #     RABBITMQ_QUEUE_IN: detected_faces
  #     RABBITMQ_QUEUE_OUT: recognition_results
  #     MILVUS_HOST: milvus
  #     MILVUS_PORT: 19530
  #   depends_on:
  #     - rabbitmq
  #     - milvus

  # # Data Storage Service (for storing recognized face data)
  # data_storage_service:
  #   build: ./services/data_storage_service
  #   environment:
  #     RABBITMQ_HOST: rabbitmq
  #     RABBITMQ_QUEUE_IN: recognition_results
  #     MILVUS_HOST: milvus
  #     MILVUS_PORT: 19530
  #   depends_on:
  #     - rabbitmq
  #     - milvus

  # Milvus Database
  milvus-etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.data/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.data/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.15
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.data/milvus/main:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"

  milvus-attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.4
    environment:
      - MILVUS_URL=milvus-standalone:19530
    ports:
      - "3168:3000"
    depends_on:
      - "milvus-standalone"

  # Nginx API Gateway
  nginx:
    image: nginx:latest
    volumes:
      - .config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - rtsp-device-service
      - face-recognition-web-service
      - ui-web-service

volumes:
  mongo-data:

networks:
  default:
    name: milvus
